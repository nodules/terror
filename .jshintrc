{
    // This option prohibits the use of bitwise operators such as ^ (XOR), | (OR) and others.
    "bitwise" : true,

     // This option allows you to force all variable names to use either camelCase style or UPPER_CASE with underscores
    "camelcase" : false,

     // This option requires you to always put curly braces around blocks in loops and conditionals.
    "curly" : true,

     // This options prohibits the use of == and != in favor of === and !==.
    "eqeqeq" : true,

     // This option requires all for in loops to filter object' sitems.
    "forin" : true,

     // This option prohibits the use of immediate function invocations without wrapping them in parentheses.
    "immed" : true,

     // This option enforces specific tab width for your code.
     "indent" : 4,

     // This option prohibits the use of a variable and function before it was defined.
    "latedef" : "nofunc",

     // This option requires you to capitalize names of constructor functions.
    "newcap" : true,

     // This option prohibits the use of arguments.caller and arguments.callee.
    "noarg" : true,

     // This option warns when you have an empty block in your code.
    "noempty" : true,

     // This option prohibits the use of constructor functions forside-effects.
    "nonew" : false,

     // This option prohibits the use of unary increment and decrement operators.
    "plusplus" : false,

     // This option enforces the consistency of quotation marks used throughout your code.
    "quotmark" : false,

     // This option prohibits the use of unsafe . in regular expressions.
    "regexp" : false,

     // This option prohibits the use of explicitly undeclared variables.
    "undef" : true,

     // This option warns when you define and never use your variables.
    "unused" : true,

     // This option requires all functions to run in EcmaScript 5's strict mode.
    "strict" : false,

     // This option makes it an error to leave a trailing whitespace in your code.
    "trailing" : true,

     // This option lets you set the max number of formal parameters allowed per function.
     //"maxparams" : 5,

     // This option lets you control how nested do you want your blocks tobe.
     "maxdepth" : 5,

     // This option lets you set the max number of statements allowed per function.
    "maxstatements" : false,

     // This option lets you control cyclomatic complexity throughout your code.
    "maxcomplexity" : false,


     // This option suppresses warnings about missing semicolons.
    "asi" : false,

     // This option suppresses warnings about the use of assignments in cases where comparisons are expected.
    "boss" : false,

     // This option suppresses warnings about the debugger statements in your code.
    "debug" : false,

     // This option suppresses warnings about == null comparisons.
    "eqnull" : true,

     // This option tells JSHint that your code uses ECMAScript 5 specific features such as getters and setters.
    "es5" : false,

     // This option tells JSHint that your code uses ES.next specific features such as const.
    "esnext" : false,

     // This option suppresses warnings about the use of eval and new Function().
    "evil" : true,

     // This option suppresses warnings about the use of expressions
     // where normally you would expect to see assignments or function calls.
    "expr" : true,

     // This option suppresses warnings about declaring variables inside of control structures
     // while accessing them later from the outside.
    "funcscope" : false,

     // This option suppresses warnings about the use of global strict mode.
    "globalstrict" : false,

     // This option suppresses warnings about the __iterator__ property.
    "iterator" : false,

     // This option suppresses warnings about missing semicolons,
     // but only when the semicolon is omitted for the last statement in a one-line block.
    "lastsemic" : false,

     // This option suppresses most of the warnings about possibly unsafe line breakings in your code.
    "laxbreak" : false,

     // This option suppresses warnings about comma-first codin gstyle
    "laxcomma" : false,

     // This option suppresses warnings about functions inside of loops.
    "loopfunc" : false,

     // This option suppresses warnings about multi-line strings.
    "multistr" : false,

     // This option suppresses warnings about switches with just one case.
    "onecase" : false,

     // This option suppresses warnings about the __proto__ property.
    "proto" : false,

     // This option suppresses warnings about unescaped - in the end of regular expressions.
    "regexdash" : false,

     // This option suppresses warnings about the use of script-targeted URLs—such as javascript:....
    "scripturl" : false,

     // This option suppresses warnings about mixed tabs and spaces when the latter are used for alignmnent only.
    "smarttabs" : false,

     // This option suppresses warnings about variableshadowing
     // i.e. declaring a variable that had been already declared somewhere in the outer scope.
    "shadow" : false,

     // This option suppresses warnings about using [] notation
     // when it can be expressed in dot notation: person['name'] vs.person.name.
    "sub" : true,

     // This option suppresses warnings about "weird" constructions like new function () { ... } and newObject.
    "supernew" : false,

     // This option suppresses warnings about possible strictviolations
     // when the code is running in strict mode and you use this in a non-constructor function.
    "validthis" : false,


     // This option defines globals exposed by modern browsers: all the way from good ol' document and navigator
     // to the HTML5 FileReader and other new developments in the browser world.
    "browser" : false,

     // This option defines globals exposed byCouchDB.
    "couch" : false,

     // This option defines globals that are usually used for logging poor-man's debugging: console, alert,etc.
    "devel" : false,

     // This option defines globals exposed by the DojoToolkit.
    "dojo" : false,

     // This option defines globals exposed by the jQuery JavaScript library.
    "jquery" : false,

     // This option defines globals exposed by the MooTools JavaScript framework.
    "mootools" : false,

     // This option defines globals available when your code is running inside of the Node runtime environment.
    "node" : true,

     // This option defines non-standard but widely adopted globals such as escape and un escape.
    "nonstandard" : false,

     // This option defines globals exposed by the Prototype JavaScript framework.
    "prototypejs" : false,

     // This option defines globals available when your code is running inside of the Rhino runtime environment.
    "rhino" : false,

     // This option defines globals available when your code is running inside of a WebWorker.
    "worker" : false,

     // This option defines globals available when your code is running as a script for the Windows ScriptHost.
    "wsh" : false,

    // This option make JSHint check your source code against Douglas Crockford's JavaScript coding style.
    // Unfortunately, his “The Good Parts” book aside, the actual rules are not very well documented.
    "white" : false
}
